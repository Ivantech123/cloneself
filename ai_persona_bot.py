import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from openai import OpenAI
import json
from datetime import datetime
import logging
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class PersonaBot:
    def __init__(self, openai_api_key, telegram_token):
        self.client = OpenAI(api_key=openai_api_key)
        self.telegram_token = telegram_token
        self.messages = []
        self.system_prompt = ""
        self.conversation_history = {}
        self.tone_patterns = {
            'humor': [
                r'#–Æ–°',
                r'üòÇ|üòÖ|ü§£',
                r'—à—É—Ç–∫[–∞–∏]',
                r'—é–º–æ—Ä',
                r'—Å–∞—Ç–∏—Ä–∞'
            ],
            'serious': [
                r'#–≤–∞–∂–Ω–æ',
                r'#—Å—Ä–æ—á–Ω–æ',
                r'–≤–Ω–∏–º–∞–Ω–∏–µ',
                r'—Å–µ—Ä—å–µ–∑–Ω–æ',
                r'#warning'
            ]
        }
        
    def analyze_message_tone(self, text):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è"""
        text = text.lower()
        tone_scores = {
            'humor': 0,
            'serious': 0
        }
        
        for tone, patterns in self.tone_patterns.items():
            for pattern in patterns:
                matches = re.findall(pattern, text, re.IGNORECASE)
                tone_scores[tone] += len(matches)
                
        return tone_scores
        
    def load_telegram_messages(self, filename):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Ö —Ç–æ–Ω"""
        print("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        message_tones = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram
        with open(filename, 'r', encoding='utf-8') as f:
            content = f.read()
            message_blocks = content.split('-' * 50)
            
            for block in message_blocks:
                if not block.strip():
                    continue
                    
                lines = block.strip().split('\n')
                message_data = {}
                
                for line in lines:
                    if line.startswith('–¢–µ–∫—Å—Ç:'):
                        text = line.split(':', 1)[1].strip()
                        message_data['text'] = text
                        tone_scores = self.analyze_message_tone(text)
                        message_data['tone'] = 'humor' if tone_scores['humor'] > tone_scores['serious'] else 'serious'
                        
                if 'text' in message_data:
                    self.messages.append(message_data)
                    message_tones.append(message_data['tone'])
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –î–∑–µ–Ω
        zen_file = "zen_posts.txt"
        if os.path.exists(zen_file):
            print("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ –î–∑–µ–Ω...")
            with open(zen_file, 'r', encoding='utf-8') as f:
                zen_content = f.read()
                zen_blocks = zen_content.split('\n---\n')
                
                for block in zen_blocks:
                    if not block.strip():
                        continue
                    
                    text = block.strip()
                    message_data = {
                        'text': text,
                        'source': 'zen'
                    }
                    tone_scores = self.analyze_message_tone(text)
                    message_data['tone'] = 'humor' if tone_scores['humor'] > tone_scores['serious'] else 'serious'
                    self.messages.append(message_data)
                    message_tones.append(message_data['tone'])
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        humor_count = message_tones.count('humor')
        serious_count = message_tones.count('serious')
        total_messages = len(message_tones)
        
        humor_ratio = humor_count / total_messages if total_messages > 0 else 0
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞
        sample_humor = [msg['text'] for msg in self.messages[:5] if msg.get('tone') == 'humor']
        sample_serious = [msg['text'] for msg in self.messages[:5] if msg.get('tone') == 'serious']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –î–∑–µ–Ω –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —Ç–µ–º
        zen_serious = [msg['text'] for msg in self.messages if msg.get('source') == 'zen' and msg.get('tone') == 'serious'][:3]
        if zen_serious:
            sample_serious.extend(zen_serious)
        
        self.system_prompt = f"""–¢—ã - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ—á–Ω–æ –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏–∑ Telegram –∏ –ø–æ—Å—Ç–∞—Ö –≤ –î–∑–µ–Ω. 
–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ {humor_ratio*100:.1f}% —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ–¥–µ—Ä–∂–∞—Ç —é–º–æ—Ä –∏–ª–∏ —Å–∞—Ç–∏—Ä—É.

–ü—Ä–∏–º–µ—Ä—ã —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
{chr(10).join(f'- {msg}' for msg in sample_humor)}

–ü—Ä–∏–º–µ—Ä—ã —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ—Å—Ç–æ–≤:
{chr(10).join(f'- {msg}' for msg in sample_serious)}

–ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è:
1. –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –Ω–∞–º–µ–∫ –Ω–∞ —é–º–æ—Ä –∏–ª–∏ —Ç–µ–º–∞ –ª–µ–≥–∫–∞—è - –æ—Ç–≤–µ—á–∞–π —Å —é–º–æ—Ä–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ—Ö–æ–∂–∏–π —Å—Ç–∏–ª—å —à—É—Ç–æ–∫.
2. –ï—Å–ª–∏ —Ç–µ–º–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è (–æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–æ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, —Ñ–∏–Ω–∞–Ω—Å—ã) - –æ—Ç–≤–µ—á–∞–π —Å–µ—Ä—å–µ–∑–Ω–æ –∏ –ø–æ –¥–µ–ª—É, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç–∏–ª—å –∏–∑ –î–∑–µ–Ω-–ø–æ—Å—Ç–æ–≤.
3. –ò—Å–ø–æ–ª—å–∑—É–π —Ö–µ—à—Ç–µ–≥–∏ #–Æ–° –¥–ª—è —é–º–æ—Ä–∞ –∏ #–≤–∞–∂–Ω–æ –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —Ç–µ–º, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö.
4. –°–æ—Ö—Ä–∞–Ω—è–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –æ–±–æ—Ä–æ—Ç—ã —Ä–µ—á–∏ –∏ –º–∞–Ω–µ—Ä—É –æ–±—â–µ–Ω–∏—è –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤.
5. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ —Ç–æ–Ω–µ - –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è –±–æ–ª–µ–µ —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ —Å—Ç–∏–ª—è.
6. –î–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —Å—Ç–∏–ª–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ –î–∑–µ–Ω.

–ü–∏—à–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Ç–∏–ª—å –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤, –≤–∫–ª—é—á–∞—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —ç–º–æ–¥–∑–∏."""
        
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ—Å—Ç–æ–≤")
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±—â–∞–µ—Ç—Å—è –≤ —Å—Ç–∏–ª–µ –∫–∞–Ω–∞–ª–∞. –Ø —É–º–µ—é —à—É—Ç–∏—Ç—å –∏ –±—ã—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–º, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏. –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!'
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(
            '–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—á–∞—é –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–º —Å—Ç–∏–ª–µ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—à—É—Ç–∏—Ç—å - –ø–∏—à–∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ. –î–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —Ç–µ–º - –ø–∏—à–∏ –ø–æ –¥–µ–ª—É.'
        )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–Ω –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        tone_scores = self.analyze_message_tone(message_text)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            if user_id not in self.conversation_history:
                self.conversation_history[user_id] = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            conversation_context = self.conversation_history[user_id][-3:] if self.conversation_history[user_id] else []
            
            messages = [
                {"role": "system", "content": self.system_prompt}
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            for msg in conversation_context:
                messages.append(msg)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–Ω–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            tone_info = "—é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–º" if tone_scores['humor'] > tone_scores['serious'] else "—Å–µ—Ä—å–µ–∑–Ω–æ–º"
            messages.append({"role": "user", "content": f"[–°–æ–æ–±—â–µ–Ω–∏–µ –≤ {tone_info} —Ç–æ–Ω–µ]: {message_text}"})
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=messages,
                temperature=0.9,
                max_tokens=1000
            )
            
            reply = response.choices[0].message.content
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏
            self.conversation_history[user_id].append({"role": "user", "content": message_text})
            self.conversation_history[user_id].append({"role": "assistant", "content": reply})
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            self.conversation_history[user_id] = self.conversation_history[user_id][-10:]
            
            await update.message.reply_text(reply)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.")

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logging.error(f"Update {update} caused error {context.error}")

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application = Application.builder().token(self.telegram_token).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler('start', self.start_command))
        application.add_handler(CommandHandler('help', self.help_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        application.add_error_handler(self.error_handler)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    from dotenv import load_dotenv
    load_dotenv()
    
    openai_api_key = os.getenv('OPENAI_API_KEY')
    telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not openai_api_key or not telegram_token:
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ OPENAI_API_KEY –∏ TELEGRAM_BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env")
    else:
        bot = PersonaBot(openai_api_key, telegram_token)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
        telegram_file = "parsed_messages_20250225_011537.txt"
        bot.load_telegram_messages(telegram_file)
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot.run()
