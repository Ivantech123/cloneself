"""–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –±–æ—Ç–∞."""

import os
import logging
from typing import Dict, Optional
from enum import Enum

import openai
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler

class Voice(str, Enum):
    """–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞ OpenAI TTS."""
    ALLOY = "alloy"  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å
    ECHO = "echo"    # –ì–ª—É–±–æ–∫–∏–π –≥–æ–ª–æ—Å
    FABLE = "fable"  # –ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π –∞–∫—Ü–µ–Ω—Ç
    ONYX = "onyx"    # –°–µ—Ä—å–µ–∑–Ω—ã–π –≥–æ–ª–æ—Å
    NOVA = "nova"    # –ú—è–≥–∫–∏–π –≥–æ–ª–æ—Å
    SHIMMER = "shimmer"  # –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π –≥–æ–ª–æ—Å

class PersonaBot:
    """AI Persona –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""

    def __init__(self, token: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞.
        
        Args:
            token: Telegram Bot API —Ç–æ–∫–µ–Ω
        """
        self.application = Application.builder().token(token).build()
        self.voice_enabled: Dict[int, bool] = {}
        self.user_voices: Dict[int, Voice] = {}
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("voice", self.voice_command))
        self.application.add_handler(CommandHandler("voice_select", self.voice_select_command))
        self.application.add_handler(CallbackQueryHandler(self.voice_button))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    async def start_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø AI Persona –±–æ—Ç. –Ø –º–æ–≥—É –æ–±—â–∞—Ç—å—Å—è —Ç–µ–∫—Å—Ç–æ–º –∏ –≥–æ–ª–æ—Å–æ–º.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/voice - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "/voice_select - –≤—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å"
        )

    async def voice_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /voice –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        user_id = update.effective_user.id
        self.voice_enabled[user_id] = not self.voice_enabled.get(user_id, False)
        
        if self.voice_enabled[user_id] and user_id not in self.user_voices:
            self.user_voices[user_id] = Voice.ALLOY
            
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if self.voice_enabled[user_id] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        voice_name = self.user_voices.get(user_id, Voice.ALLOY).value
        
        if self.voice_enabled[user_id]:
            await update.message.reply_text(
                f"–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è {status}\n"
                f"–¢–µ–∫—É—â–∏–π –≥–æ–ª–æ—Å: {voice_name}\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /voice_select —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ–ª–æ—Å"
            )
        else:
            await update.message.reply_text(f"–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è {status}")

    async def voice_select_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /voice_select –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞."""
        keyboard = []
        for voice in Voice:
            keyboard.append([InlineKeyboardButton(
                f"üé§ {voice.value}" + (" ‚úì" if self.user_voices.get(update.effective_user.id) == voice else ""),
                callback_data=f"voice_{voice.value}"
            )])
            
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å:", reply_markup=reply_markup)

    async def voice_button(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞."""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("voice_"):
            voice_name = query.data.replace("voice_", "")
            user_id = query.from_user.id
            self.user_voices[user_id] = Voice(voice_name)
            
            # –í–∫–ª—é—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã
            if not self.voice_enabled.get(user_id, False):
                self.voice_enabled[user_id] = True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = []
            for voice in Voice:
                keyboard.append([InlineKeyboardButton(
                    f"üé§ {voice.value}" + (" ‚úì" if voice.value == voice_name else ""),
                    callback_data=f"voice_{voice.value}"
                )])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"–í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: {voice_name}\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ–ª–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                reply_markup=reply_markup
            )

    async def handle_message(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        user_id = update.effective_user.id
        user_message = update.message.text

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
        response = self.get_ai_response(user_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        await update.message.reply_text(response)
        
        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –∏—Ö
        if self.voice_enabled.get(user_id, False):
            voice = self.user_voices.get(user_id, Voice.ALLOY)
            audio_file = self.generate_voice(response, voice)
            if audio_file:
                await update.message.reply_voice(audio_file)
                os.remove(audio_file)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

    def get_ai_response(self, message: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI API."""
        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": message}]
            )
            return response.choices[0].message.content
        except Exception as e:
            logging.error(f"Error getting AI response: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."

    def generate_voice(self, text: str, voice: Voice = Voice.ALLOY) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI TTS.
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
            voice: –ì–æ–ª–æ—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ALLOY)
            
        Returns:
            –ü—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            response = openai.audio.speech.create(
                model="tts-1",
                voice=voice.value,
                input=text
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = "temp_voice.mp3"
            response.stream_to_file(temp_file)
            return temp_file
        except Exception as e:
            logging.error(f"Error generating voice: {e}")
            return None

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        self.application.run_polling()
